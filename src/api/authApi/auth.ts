import { conf } from "@/conf/conf";
import { axiosRequest } from "@/lib/utils";
import { IExistingUser, INewUser, backendResponse } from "@/types";
import { AxiosRequestConfig } from 'axios';

/* This is the class For writing all the functions required To authenticate user
A object is already created. Now the object is exported. And you can just Use 
whatever functionalities that you want to use just by Calling the Method That 
belong in the class . This comment is generated by a voice assistant feature of
vs code that I recently tried. So grammatical mistakes should be pardoned.  
*/

export class AuthFuctions {
    endpoint;
    constructor() {
        this.endpoint = conf.serverEndpoint;
    }

    async createNewAccount(userData: INewUser) {

        const config: AxiosRequestConfig = {
            method: 'POST',
            url: '/api/v1/auth/signup',
            data: userData
        };

        // Make a POST request to the '/signup' endpoint using the axiosRequest wrapper
        const response = await axiosRequest(config);

        // Handle the response data
        const newUser: backendResponse = response.data;
        if (response.statusCode >= 400 && response.statusCode <= 500) {
            return { success: false, statusCode: response.statusCode, message: response.error };
        }


        // Send OTP to user
        const receivedEmailFromServer: string = newUser.data.email;
        const isOtpSent = await this.sendOtpToVerifyNewAccount(receivedEmailFromServer);
        if (!isOtpSent.success) {
            return { success: false, statusCode: response.statusCode, message: isOtpSent.message };
        }

        return { success: true, statusCode: response.statusCode, message: isOtpSent.message };
    }

    async sendOtpToVerifyNewAccount(email: string) {

        const config: AxiosRequestConfig = {
            method: 'POST',
            url: '/api/v1/auth/send-otp-to-mail',
            data: { email }
        };

        const response = await axiosRequest(config);
        const responseData: backendResponse = response.data;

        if (response.statusCode >= 400 && response.statusCode <= 500) {
            return { success: false, statusCode: response.statusCode, message: response.error };
        }
        return { success: true, statusCode: response.statusCode, data: responseData?.data, message: responseData?.message };
    }

    async verifySentOtp({ email, otp }: { email: string, otp: string }) {
        const config: AxiosRequestConfig = {
            method: 'POST',
            url: '/api/v1/auth/verify-otp',
            data: { email, otp }
        };

        const response = await axiosRequest(config);
        const responseData: backendResponse = response.data;

        if (response.statusCode >= 400 && response.statusCode <= 500) {
            return { success: false, statusCode: response.statusCode, message: response.error };
        }
        return { success: true, statusCode: response.statusCode, data: responseData?.data, message: responseData?.message };
    }

    async forgotPassword(email: string) {
        const config: AxiosRequestConfig = {
            method: 'POST',
            url: '/api/v1/auth/forgot-password',
            data: { email }
        };

        const response = await axiosRequest(config);

        const responseData: backendResponse = response.data;

        if (response.statusCode >= 400 && response.statusCode <= 500) {
            return { success: false, statusCode: response.statusCode, message: response.error };
        }
        return { success: true, statusCode: response.statusCode, data: responseData?.data, message: responseData?.message };
    }

    async resetforgottenPassword({ resetToken, password }: { resetToken: string, password: string }) {
        const config: AxiosRequestConfig = {
            method: 'POST',
            url: `/api/v1/auth/forgot-reset-password?resetToken=${resetToken}`,
            data: { password }
        };

        const response = await axiosRequest(config);
        const responseData: backendResponse = response.data;

        if (response.statusCode >= 400 && response.statusCode <= 500) {
            return { success: false, statusCode: response.statusCode, message: response.error };
        }
        return { success: true, statusCode: response.statusCode, data: responseData?.data, message: responseData?.message };
    }

    async login(loginData: IExistingUser) {
        const config: AxiosRequestConfig = {
            method: 'POST',
            url: `/api/v1/auth/signin`,
            data: loginData
        };

        const response = await axiosRequest(config);
        const responseData: backendResponse = response.data;

        if (response.statusCode >= 400 && response.statusCode <= 500) {
            if (response.statusCode === 403 || response.statusCode === 404) {
                return { success: false, statusCode: response.statusCode, message: "Invalid Credentials" };
            }
            return { success: false, statusCode: response.statusCode, message: response.error };
        }
        return { success: true, statusCode: response.statusCode, data: responseData?.data, message: responseData?.message };
    }

    async refreshAccessToken() {
        const config: AxiosRequestConfig = {
            method: 'GET',
            url: `/api/v1/auth/refresh-access-token`
        };

        const response = await axiosRequest(config);
        const responseData: backendResponse = response.data;

        if (response.statusCode >= 400 && response.statusCode <= 500) {
            return { success: false, statusCode: response.statusCode, data: null, message: response.error };
        }
        return { success: true, statusCode: response.statusCode, data: null, message: responseData?.message };
    }

    async logout() {

        const config: AxiosRequestConfig = {
            method: 'GET',
            url: `/api/v1/auth/signout`
        };

        let maxTries = 3;
        let thisFunctionReturn = { success: false, data: null, message: '' };
        let isRefreshed = false;

        while (maxTries > 0) {
            const response = await axiosRequest(config);
            const responseData: backendResponse = response.data;

            if (response.statusCode >= 400 && response.statusCode <= 500 || !response.success) {
                console.log("Refreshing Access Token");
                isRefreshed = await this.handleAccessTokenExpired();
                if (isRefreshed) continue;
                thisFunctionReturn = { success: false, data: null, message: response.error };
                maxTries--;
            } else {
                thisFunctionReturn = { success: true, data: null, message: responseData?.message };
                break;
            }
        }

        return thisFunctionReturn;
    }

    async handleAccessTokenExpired() {
        const tokenRefreshRes = await this.refreshAccessToken();
        if (tokenRefreshRes.success) {
            return true;
        }
        return false;
    }

    async createNewAdminAccount(userData: INewUser) {

        const config: AxiosRequestConfig = {
            method: 'POST',
            url: '/api/v1/auth/admin/register',
            data: userData
        };

        // Make a POST request to the '/signup' endpoint using the axiosRequest wrapper
        const response = await axiosRequest(config);

        // Handle the response data
        const newUser: backendResponse = response.data;
        if (response.statusCode >= 400 && response.statusCode <= 500) {
            return { success: false, statusCode: response.statusCode, message: response.error };
        }


        // Send OTP to user
        const receivedEmailFromServer: string = newUser.data.email;
        const isOtpSent = await this.sendOtpToVerifyNewAccount(receivedEmailFromServer);
        if (!isOtpSent.success) {
            return { success: false, statusCode: isOtpSent.statusCode, message: isOtpSent.message };
        }

        return { success: true, message: isOtpSent.message };
    }

    async adminLogin(loginData: IExistingUser) {
        const config: AxiosRequestConfig = {
            method: 'POST',
            url: `/api/v1/auth/admin/signin`,
            data: loginData
        };

        const response = await axiosRequest(config);
        const responseData: backendResponse = response.data;

        if (response.statusCode >= 400 && response.statusCode <= 500) {
            if (response.statusCode === 403 || response.statusCode === 404) {
                return { success: false, statusCode: response.statusCode, message: "Invalid Credentials" };
            }
            return { success: false, statusCode: response.statusCode, message: response.error };
        }
        return { success: true, statusCode: response.statusCode, data: responseData?.data, message: responseData?.message };
    }
}

const authFunctions = new AuthFuctions();
export default authFunctions;